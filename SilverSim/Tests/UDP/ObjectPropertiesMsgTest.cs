// SilverSim is distributed under the terms of the
// GNU Affero General Public License v3 with
// the following clarification and special exception.

// Linking this library statically or dynamically with other modules is
// making a combined work based on this library. Thus, the terms and
// conditions of the GNU Affero General Public License cover the whole
// combination.

// As a special exception, the copyright holders of this library give you
// permission to link this library with independent modules to produce an
// executable, regardless of the license terms of these independent
// modules, and to copy and distribute the resulting executable under
// terms of your choice, provided that you also meet, for each linked
// independent module, the terms and conditions of the license of that
// module. An independent module is a module which is not derived from
// or based on this library. If you modify this library, you may extend
// this exception to your version of the library, but you are not
// obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.

using log4net;
using SilverSim.Main.Common;
using SilverSim.Tests.Extensions;
using SilverSim.Viewer.Messages;
using SilverSim.Viewer.Messages.Object;
using System.Reflection;

namespace SilverSim.Tests.UDP
{
    public class ObjectPropertiesMsgTest : ITest
    {
        private static readonly ILog m_Log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        public void Startup(ConfigurationLoader loader)
        {
        }

        public void Setup()
        {

        }

        public void Cleanup()
        {
        }

        private byte[] testData = new byte[] 
        {
            0x65, 0x98, 0x35, 0xf2, 0xbc, 0x79, 0x47, 0x1c, 0x9a, 0x0c, 0x53, 0xdb, 0x2a, 0x9f, 0xad, 0x36,
            0xb4, 0x17, 0x13, 0xa0, 0xae, 0x88, 0x4f, 0xcb, 0xa3, 0xca, 0x1b, 0x5d, 0x96, 0xc8, 0x04, 0xd3,
            0xb4, 0x17, 0x13, 0xa0, 0xae, 0x88, 0x4f, 0xcb, 0xa3, 0xca, 0x1b, 0x5d, 0x96, 0xc8, 0x04, 0xd3,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x9a, 0xec, 0x21, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x08, 0x00, 0xff, 0xbf, 0xf7, 0x7f,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb4, 0x17,
            0x13, 0xa0, 0xae, 0x88, 0x4f, 0xcb, 0xa3, 0xca, 0x1b, 0x5d, 0x96, 0xc8, 0x04, 0xd3, 0x0c, 0x50,
            0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x32, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
            0x00, 0x00
        };

        public bool Run()
        {
            m_Log.Info("Putting test data into ObjectProperties");
            ObjectProperties propMsg = new ObjectProperties();
            propMsg.ObjectData.Add(testData);
            UDPPacket p = new UDPPacket(4096, true);
            propMsg.Serialize(p);
            p.Flush();
            m_Log.InfoFormat("Serialized length={0}", p.DataLength);
            return p.DataLength == 118;
        }
    }
}
